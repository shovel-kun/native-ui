///
/// HybridTextInputManager.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.nativeui.views

import android.view.View
import com.facebook.react.fabric.StateWrapperImpl
import com.facebook.react.uimanager.ReactStylesDiffMap
import com.facebook.react.uimanager.SimpleViewManager
import com.facebook.react.uimanager.StateWrapper
import com.facebook.react.uimanager.ThemedReactContext
import com.nativeui.*

/**
 * Represents the React Native `ViewManager` for the "TextInput" Nitro HybridView.
 */
class HybridTextInputManager: SimpleViewManager<View>() {
  private val views = hashMapOf<View, HybridTextInput>()

  override fun getName(): String {
    return "TextInput"
  }

  override fun createViewInstance(reactContext: ThemedReactContext): View {
    val hybridView = HybridTextInput(reactContext)
    val view = hybridView.view
    views[view] = hybridView
    return view
  }

  override fun onDropViewInstance(view: View) {
    super.onDropViewInstance(view)
    views.remove(view)
  }

  override fun updateState(view: View, props: ReactStylesDiffMap, stateWrapper: StateWrapper): Any? {
    // 1. Downcast state
    val stateWrapperImpl = stateWrapper as? StateWrapperImpl ?: throw Error("StateWrapper uses a different implementation!")
    val hybridView = views[view] ?: throw Error("Couldn't find view $view in local views table!")

    // 2. Update each prop individually
    hybridView.beforeUpdate()
    HybridTextInputStateUpdater.updateViewProps(hybridView, stateWrapperImpl)
    hybridView.afterUpdate()

    // 3. Continue in base View props
    return super.updateState(view, props, stateWrapper)
  }
}
