///
/// HybridBottomSheetManager.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.nativeui.views

import android.view.View
import android.view.ViewGroup
import android.widget.FrameLayout
import android.widget.LinearLayout
import com.facebook.react.fabric.StateWrapperImpl
import com.facebook.react.uimanager.ReactStylesDiffMap
import com.facebook.react.uimanager.SimpleViewManager
import com.facebook.react.uimanager.StateWrapper
import com.facebook.react.uimanager.ThemedReactContext
import com.facebook.react.uimanager.ViewGroupManager
import com.nativeui.*
import com.nativeui.views.*

/**
 * Represents the React Native `ViewManager` for the "BottomSheet" Nitro HybridView.
 */
class HybridBottomSheetManager: ViewGroupManager<ViewGroup>() {
  private val views = hashMapOf<View, HybridBottomSheet>()

  override fun getName(): String {
    return "BottomSheet"
  }

  override fun createViewInstance(reactContext: ThemedReactContext): ViewGroup {
    val hybridView = HybridBottomSheet(reactContext)
    val view = hybridView.view
    views[view] = hybridView
    return view
  }

  override fun onDropViewInstance(view: ViewGroup) {
    super.onDropViewInstance(view)
    views.remove(view)
  }

  override fun updateState(view: ViewGroup, props: ReactStylesDiffMap, stateWrapper: StateWrapper): Any? {
    // 1. Downcast state
    val stateWrapperImpl = stateWrapper as? StateWrapperImpl ?: throw Error("StateWrapper uses a different implementation!")
    val hybridView = views[view] ?: throw Error("Couldn't find view $view in local views table!")
    val sview = hybridView.view as? NativeView ?: return null
    sview.stateWrapper = stateWrapper

    // 2. Update each prop individually
    hybridView.beforeUpdate()
    HybridBottomSheetStateUpdater.updateViewProps(hybridView, stateWrapperImpl)
    hybridView.afterUpdate()

    // 3. Continue in base View props
    return super.updateState(view, props, stateWrapper)
  }
}

//class HybridBottomSheetManager: ViewGroupManager<ViewGroup>() {
//  private val views = hashMapOf<View, HybridBottomSheet>()
//
//  override fun getName(): String {
//    return "BottomSheet"
//  }
//
//  override fun createViewInstance(reactContext: ThemedReactContext): ViewGroup {
//    val hybridView = HybridBottomSheet(reactContext)
//    val view = hybridView.view
//    views[view] = hybridView
//    return view
//  }
//
//  override fun onDropViewInstance(view: ViewGroup) {
//    super.onDropViewInstance(view)
//    views.remove(view)
//  }
//
//  override fun updateState(view: ViewGroup, props: ReactStylesDiffMap, stateWrapper: StateWrapper): Any? {
//    // 1. Downcast state
//    val stateWrapperImpl = stateWrapper as? StateWrapperImpl ?: throw Error("StateWrapper uses a different implementation!")
//    val hybridView = views[view] ?: throw Error("Couldn't find view $view in local views table!")
//    val view = hybridView.view as? NativeView ?: return null
//    view.stateWrapper = stateWrapper
//
//    // 2. Update each prop individually
//    hybridView.beforeUpdate()
//    HybridBottomSheetStateUpdater.updateViewProps(hybridView, stateWrapperImpl)
//    hybridView.afterUpdate()
//
//    // 3. Continue in base View props
//    return super.updateState(view, props, stateWrapper)
//  }
//}
