///
/// JHybridDropdownMenuSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridDropdownMenuSpec.hpp"



#include <optional>
#include <string>
#include <functional>
#include "JFunc_void_double.hpp"
#include <vector>

namespace margelo::nitro::nativeui {

  jni::local_ref<JHybridDropdownMenuSpec::jhybriddata> JHybridDropdownMenuSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridDropdownMenuSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridDropdownMenuSpec::initHybrid),
    });
  }

  size_t JHybridDropdownMenuSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  std::optional<std::string> JHybridDropdownMenuSpec::getLabel() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getLabel");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
  }
  void JHybridDropdownMenuSpec::setLabel(const std::optional<std::string>& label) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* label */)>("setLabel");
    method(_javaPart, label.has_value() ? jni::make_jstring(label.value()) : nullptr);
  }
  std::optional<double> JHybridDropdownMenuSpec::getSelectedIndex() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JDouble>()>("getSelectedIndex");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->value()) : std::nullopt;
  }
  void JHybridDropdownMenuSpec::setSelectedIndex(std::optional<double> selectedIndex) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JDouble> /* selectedIndex */)>("setSelectedIndex");
    method(_javaPart, selectedIndex.has_value() ? jni::JDouble::valueOf(selectedIndex.value()) : nullptr);
  }
  std::optional<std::function<void(double /* index */)>> JHybridDropdownMenuSpec::getOnOptionSelected() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JFunc_void_double::javaobject>()>("getOnOptionSelected_cxx");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional([&]() -> std::function<void(double /* index */)> {
      if (__result->isInstanceOf(JFunc_void_double_cxx::javaClassStatic())) [[likely]] {
        auto downcast = jni::static_ref_cast<JFunc_void_double_cxx::javaobject>(__result);
        return downcast->cthis()->getFunction();
      } else {
        auto __resultRef = jni::make_global(__result);
        return [__resultRef](double index) -> void {
          return __resultRef->invoke(index);
        };
      }
    }()) : std::nullopt;
  }
  void JHybridDropdownMenuSpec::setOnOptionSelected(const std::optional<std::function<void(double /* index */)>>& onOptionSelected) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void_double::javaobject> /* onOptionSelected */)>("setOnOptionSelected_cxx");
    method(_javaPart, onOptionSelected.has_value() ? JFunc_void_double_cxx::fromCpp(onOptionSelected.value()) : nullptr);
  }
  std::vector<std::string> JHybridDropdownMenuSpec::getOptions() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JArrayClass<jni::JString>>()>("getOptions");
    auto __result = method(_javaPart);
    return [&]() {
      size_t __size = __result->size();
      std::vector<std::string> __vector;
      __vector.reserve(__size);
      for (size_t __i = 0; __i < __size; __i++) {
        auto __element = __result->getElement(__i);
        __vector.push_back(__element->toStdString());
      }
      return __vector;
    }();
  }
  void JHybridDropdownMenuSpec::setOptions(const std::vector<std::string>& options) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JArrayClass<jni::JString>> /* options */)>("setOptions");
    method(_javaPart, [&]() {
      size_t __size = options.size();
      jni::local_ref<jni::JArrayClass<jni::JString>> __array = jni::JArrayClass<jni::JString>::newArray(__size);
      for (size_t __i = 0; __i < __size; __i++) {
        const auto& __element = options[__i];
        __array->setElement(__i, *jni::make_jstring(__element));
      }
      return __array;
    }());
  }

  // Methods
  

} // namespace margelo::nitro::nativeui
