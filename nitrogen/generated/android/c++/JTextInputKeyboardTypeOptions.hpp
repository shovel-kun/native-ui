///
/// JTextInputKeyboardTypeOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "TextInputKeyboardTypeOptions.hpp"

namespace margelo::nitro::nativeui {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "TextInputKeyboardTypeOptions" and the the Kotlin enum "TextInputKeyboardTypeOptions".
   */
  struct JTextInputKeyboardTypeOptions final: public jni::JavaClass<JTextInputKeyboardTypeOptions> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/nativeui/TextInputKeyboardTypeOptions;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum TextInputKeyboardTypeOptions.
     */
    [[maybe_unused]]
    [[nodiscard]]
    TextInputKeyboardTypeOptions toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("_ordinal");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<TextInputKeyboardTypeOptions>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JTextInputKeyboardTypeOptions> fromCpp(TextInputKeyboardTypeOptions value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldDEFAULT = clazz->getStaticField<JTextInputKeyboardTypeOptions>("DEFAULT");
      static const auto fieldNUMBER_PAD = clazz->getStaticField<JTextInputKeyboardTypeOptions>("NUMBER_PAD");
      static const auto fieldDECIMAL_PAD = clazz->getStaticField<JTextInputKeyboardTypeOptions>("DECIMAL_PAD");
      static const auto fieldNUMERIC = clazz->getStaticField<JTextInputKeyboardTypeOptions>("NUMERIC");
      static const auto fieldEMAIL_ADDRESS = clazz->getStaticField<JTextInputKeyboardTypeOptions>("EMAIL_ADDRESS");
      static const auto fieldPHONE_PAD = clazz->getStaticField<JTextInputKeyboardTypeOptions>("PHONE_PAD");
      static const auto fieldURL = clazz->getStaticField<JTextInputKeyboardTypeOptions>("URL");
      static const auto fieldASCII_CAPABLE = clazz->getStaticField<JTextInputKeyboardTypeOptions>("ASCII_CAPABLE");
      static const auto fieldNUMBERS_AND_PUNCTUATION = clazz->getStaticField<JTextInputKeyboardTypeOptions>("NUMBERS_AND_PUNCTUATION");
      static const auto fieldNAME_PHONE_PAD = clazz->getStaticField<JTextInputKeyboardTypeOptions>("NAME_PHONE_PAD");
      static const auto fieldTWITTER = clazz->getStaticField<JTextInputKeyboardTypeOptions>("TWITTER");
      static const auto fieldWEB_SEARCH = clazz->getStaticField<JTextInputKeyboardTypeOptions>("WEB_SEARCH");
      static const auto fieldPASSWORD = clazz->getStaticField<JTextInputKeyboardTypeOptions>("PASSWORD");
      static const auto fieldNUMBER_PASSWORD = clazz->getStaticField<JTextInputKeyboardTypeOptions>("NUMBER_PASSWORD");
      
      switch (value) {
        case TextInputKeyboardTypeOptions::DEFAULT:
          return clazz->getStaticFieldValue(fieldDEFAULT);
        case TextInputKeyboardTypeOptions::NUMBER_PAD:
          return clazz->getStaticFieldValue(fieldNUMBER_PAD);
        case TextInputKeyboardTypeOptions::DECIMAL_PAD:
          return clazz->getStaticFieldValue(fieldDECIMAL_PAD);
        case TextInputKeyboardTypeOptions::NUMERIC:
          return clazz->getStaticFieldValue(fieldNUMERIC);
        case TextInputKeyboardTypeOptions::EMAIL_ADDRESS:
          return clazz->getStaticFieldValue(fieldEMAIL_ADDRESS);
        case TextInputKeyboardTypeOptions::PHONE_PAD:
          return clazz->getStaticFieldValue(fieldPHONE_PAD);
        case TextInputKeyboardTypeOptions::URL:
          return clazz->getStaticFieldValue(fieldURL);
        case TextInputKeyboardTypeOptions::ASCII_CAPABLE:
          return clazz->getStaticFieldValue(fieldASCII_CAPABLE);
        case TextInputKeyboardTypeOptions::NUMBERS_AND_PUNCTUATION:
          return clazz->getStaticFieldValue(fieldNUMBERS_AND_PUNCTUATION);
        case TextInputKeyboardTypeOptions::NAME_PHONE_PAD:
          return clazz->getStaticFieldValue(fieldNAME_PHONE_PAD);
        case TextInputKeyboardTypeOptions::TWITTER:
          return clazz->getStaticFieldValue(fieldTWITTER);
        case TextInputKeyboardTypeOptions::WEB_SEARCH:
          return clazz->getStaticFieldValue(fieldWEB_SEARCH);
        case TextInputKeyboardTypeOptions::PASSWORD:
          return clazz->getStaticFieldValue(fieldPASSWORD);
        case TextInputKeyboardTypeOptions::NUMBER_PASSWORD:
          return clazz->getStaticFieldValue(fieldNUMBER_PASSWORD);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::nativeui
