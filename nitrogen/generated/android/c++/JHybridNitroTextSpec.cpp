///
/// JHybridNitroTextSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroTextSpec.hpp"



#include <optional>
#include <string>

namespace margelo::nitro::nativeui {

  jni::local_ref<JHybridNitroTextSpec::jhybriddata> JHybridNitroTextSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroTextSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroTextSpec::initHybrid),
    });
  }

  size_t JHybridNitroTextSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  std::optional<std::string> JHybridNitroTextSpec::getText() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JString>()>("getText");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt;
  }
  void JHybridNitroTextSpec::setText(const std::optional<std::string>& text) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JString> /* text */)>("setText");
    method(_javaPart, text.has_value() ? jni::make_jstring(text.value()) : nullptr);
  }

  // Methods
  

} // namespace margelo::nitro::nativeui
