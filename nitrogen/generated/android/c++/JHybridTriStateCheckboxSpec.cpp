///
/// JHybridTriStateCheckboxSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridTriStateCheckboxSpec.hpp"

// Forward declaration of `TriStateCheckboxState` to properly resolve imports.
namespace margelo::nitro::nativeui { enum class TriStateCheckboxState; }

#include "TriStateCheckboxState.hpp"
#include "JTriStateCheckboxState.hpp"
#include <optional>
#include <functional>
#include "JFunc_void.hpp"

namespace margelo::nitro::nativeui {

  jni::local_ref<JHybridTriStateCheckboxSpec::jhybriddata> JHybridTriStateCheckboxSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridTriStateCheckboxSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridTriStateCheckboxSpec::initHybrid),
    });
  }

  size_t JHybridTriStateCheckboxSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  TriStateCheckboxState JHybridTriStateCheckboxSpec::getState() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JTriStateCheckboxState>()>("getState");
    auto __result = method(_javaPart);
    return __result->toCpp();
  }
  void JHybridTriStateCheckboxSpec::setState(TriStateCheckboxState state) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JTriStateCheckboxState> /* state */)>("setState");
    method(_javaPart, JTriStateCheckboxState::fromCpp(state));
  }
  std::optional<bool> JHybridTriStateCheckboxSpec::getDisabled() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<jni::JBoolean>()>("getDisabled");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional(static_cast<bool>(__result->value())) : std::nullopt;
  }
  void JHybridTriStateCheckboxSpec::setDisabled(std::optional<bool> disabled) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<jni::JBoolean> /* disabled */)>("setDisabled");
    method(_javaPart, disabled.has_value() ? jni::JBoolean::valueOf(disabled.value()) : nullptr);
  }
  std::optional<std::function<void()>> JHybridTriStateCheckboxSpec::getOnPress() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JFunc_void::javaobject>()>("getOnPress_cxx");
    auto __result = method(_javaPart);
    return __result != nullptr ? std::make_optional([&]() -> std::function<void()> {
      if (__result->isInstanceOf(JFunc_void_cxx::javaClassStatic())) [[likely]] {
        auto downcast = jni::static_ref_cast<JFunc_void_cxx::javaobject>(__result);
        return downcast->cthis()->getFunction();
      } else {
        return [__result]() -> void {
          return __result->invoke();
        };
      }
    }()) : std::nullopt;
  }
  void JHybridTriStateCheckboxSpec::setOnPress(const std::optional<std::function<void()>>& onPress) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void::javaobject> /* onPress */)>("setOnPress_cxx");
    method(_javaPart, onPress.has_value() ? JFunc_void_cxx::fromCpp(onPress.value()) : nullptr);
  }

  // Methods
  

} // namespace margelo::nitro::nativeui
