///
/// HybridContainerSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridContainerSpec``
public protocol HybridContainerSpec_protocol: HybridObject, HybridView {
  // Properties
  

  // Methods
  
}

/// See ``HybridContainerSpec``
public class HybridContainerSpec_base {
  private weak var cxxWrapper: HybridContainerSpec_cxx? = nil
  public func getCxxWrapper() -> HybridContainerSpec_cxx {
  #if DEBUG
    guard self is HybridContainerSpec else {
      fatalError("`self` is not a `HybridContainerSpec`! Did you accidentally inherit from `HybridContainerSpec_base` instead of `HybridContainerSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridContainerSpec_cxx(self as! HybridContainerSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the Container HybridObject.
 * Implement this protocol to create Swift-based instances of Container.
 * ```swift
 * class HybridContainer : HybridContainerSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridContainerSpec = HybridContainerSpec_protocol & HybridContainerSpec_base
