///
/// HybridNativeUiSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridNativeUiSpec``
public protocol HybridNativeUiSpec_protocol: HybridObject, HybridView {
  // Properties
  var isRed: Bool { get set }

  // Methods
  
}

/// See ``HybridNativeUiSpec``
public class HybridNativeUiSpec_base {
  private weak var cxxWrapper: HybridNativeUiSpec_cxx? = nil
  public func getCxxWrapper() -> HybridNativeUiSpec_cxx {
  #if DEBUG
    guard self is HybridNativeUiSpec else {
      fatalError("`self` is not a `HybridNativeUiSpec`! Did you accidentally inherit from `HybridNativeUiSpec_base` instead of `HybridNativeUiSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridNativeUiSpec_cxx(self as! HybridNativeUiSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the NativeUi HybridObject.
 * Implement this protocol to create Swift-based instances of NativeUi.
 * ```swift
 * class HybridNativeUi : HybridNativeUiSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridNativeUiSpec = HybridNativeUiSpec_protocol & HybridNativeUiSpec_base
