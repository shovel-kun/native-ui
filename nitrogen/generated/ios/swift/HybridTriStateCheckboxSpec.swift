///
/// HybridTriStateCheckboxSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridTriStateCheckboxSpec``
public protocol HybridTriStateCheckboxSpec_protocol: HybridObject, HybridView {
  // Properties
  var state: TriStateCheckboxState { get set }
  var disabled: Bool? { get set }
  var onPress: (() -> Void)? { get set }

  // Methods
  
}

/// See ``HybridTriStateCheckboxSpec``
public class HybridTriStateCheckboxSpec_base {
  private weak var cxxWrapper: HybridTriStateCheckboxSpec_cxx? = nil
  public func getCxxWrapper() -> HybridTriStateCheckboxSpec_cxx {
  #if DEBUG
    guard self is HybridTriStateCheckboxSpec else {
      fatalError("`self` is not a `HybridTriStateCheckboxSpec`! Did you accidentally inherit from `HybridTriStateCheckboxSpec_base` instead of `HybridTriStateCheckboxSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridTriStateCheckboxSpec_cxx(self as! HybridTriStateCheckboxSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the TriStateCheckbox HybridObject.
 * Implement this protocol to create Swift-based instances of TriStateCheckbox.
 * ```swift
 * class HybridTriStateCheckbox : HybridTriStateCheckboxSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridTriStateCheckboxSpec = HybridTriStateCheckboxSpec_protocol & HybridTriStateCheckboxSpec_base
