///
/// HybridNativeUiSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridNativeUiSpec.hpp"

// Forward declaration of `HybridNativeUiSpec_cxx` to properly resolve imports.
namespace NativeUi { class HybridNativeUiSpec_cxx; }





#include "NativeUi-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nativeui {

  /**
   * The C++ part of HybridNativeUiSpec_cxx.swift.
   *
   * HybridNativeUiSpecSwift (C++) accesses HybridNativeUiSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridNativeUiSpec_cxx can directly inherit from the C++ class HybridNativeUiSpec
   * to simplify the whole structure and memory management.
   */
  class HybridNativeUiSpecSwift: public virtual HybridNativeUiSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridNativeUiSpecSwift(const NativeUi::HybridNativeUiSpec_cxx& swiftPart):
      HybridObject(HybridNativeUiSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NativeUi::HybridNativeUiSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline bool getIsRed() noexcept override {
      return _swiftPart.isRed();
    }
    inline void setIsRed(bool isRed) noexcept override {
      _swiftPart.setIsRed(std::forward<decltype(isRed)>(isRed));
    }

  public:
    // Methods
    

  private:
    NativeUi::HybridNativeUiSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nativeui
