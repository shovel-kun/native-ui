///
/// HybridDropdownMenuSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridDropdownMenuSpec.hpp"

// Forward declaration of `HybridDropdownMenuSpec_cxx` to properly resolve imports.
namespace NativeUi { class HybridDropdownMenuSpec_cxx; }



#include <optional>
#include <string>
#include <functional>
#include <vector>

#include "NativeUi-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nativeui {

  /**
   * The C++ part of HybridDropdownMenuSpec_cxx.swift.
   *
   * HybridDropdownMenuSpecSwift (C++) accesses HybridDropdownMenuSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridDropdownMenuSpec_cxx can directly inherit from the C++ class HybridDropdownMenuSpec
   * to simplify the whole structure and memory management.
   */
  class HybridDropdownMenuSpecSwift: public virtual HybridDropdownMenuSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridDropdownMenuSpecSwift(const NativeUi::HybridDropdownMenuSpec_cxx& swiftPart):
      HybridObject(HybridDropdownMenuSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NativeUi::HybridDropdownMenuSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline std::optional<std::string> getLabel() noexcept override {
      auto __result = _swiftPart.getLabel();
      return __result;
    }
    inline void setLabel(const std::optional<std::string>& label) noexcept override {
      _swiftPart.setLabel(label);
    }
    inline std::optional<double> getSelectedIndex() noexcept override {
      auto __result = _swiftPart.getSelectedIndex();
      return __result;
    }
    inline void setSelectedIndex(std::optional<double> selectedIndex) noexcept override {
      _swiftPart.setSelectedIndex(selectedIndex);
    }
    inline std::optional<std::function<void(double /* index */)>> getOnOptionSelected() noexcept override {
      auto __result = _swiftPart.getOnOptionSelected();
      return __result;
    }
    inline void setOnOptionSelected(const std::optional<std::function<void(double /* index */)>>& onOptionSelected) noexcept override {
      _swiftPart.setOnOptionSelected(onOptionSelected);
    }
    inline std::vector<std::string> getOptions() noexcept override {
      auto __result = _swiftPart.getOptions();
      return __result;
    }
    inline void setOptions(const std::vector<std::string>& options) noexcept override {
      _swiftPart.setOptions(options);
    }

  public:
    // Methods
    

  private:
    NativeUi::HybridDropdownMenuSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nativeui
