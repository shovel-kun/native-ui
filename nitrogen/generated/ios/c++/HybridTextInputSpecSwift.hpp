///
/// HybridTextInputSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridTextInputSpec.hpp"

// Forward declaration of `HybridTextInputSpec_cxx` to properly resolve imports.
namespace NativeUi { class HybridTextInputSpec_cxx; }

// Forward declaration of `TextInputKeyboardTypeOptions` to properly resolve imports.
namespace margelo::nitro::nativeui { enum class TextInputKeyboardTypeOptions; }
// Forward declaration of `TextInputVariant` to properly resolve imports.
namespace margelo::nitro::nativeui { enum class TextInputVariant; }

#include <optional>
#include <string>
#include <functional>
#include "TextInputKeyboardTypeOptions.hpp"
#include "TextInputVariant.hpp"

#include "NativeUi-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nativeui {

  /**
   * The C++ part of HybridTextInputSpec_cxx.swift.
   *
   * HybridTextInputSpecSwift (C++) accesses HybridTextInputSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridTextInputSpec_cxx can directly inherit from the C++ class HybridTextInputSpec
   * to simplify the whole structure and memory management.
   */
  class HybridTextInputSpecSwift: public virtual HybridTextInputSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridTextInputSpecSwift(const NativeUi::HybridTextInputSpec_cxx& swiftPart):
      HybridObject(HybridTextInputSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NativeUi::HybridTextInputSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    inline std::optional<std::string> getDefaultValue() noexcept override {
      auto __result = _swiftPart.getDefaultValue();
      return __result;
    }
    inline void setDefaultValue(const std::optional<std::string>& defaultValue) noexcept override {
      _swiftPart.setDefaultValue(defaultValue);
    }
    inline std::optional<std::function<void(const std::string& /* text */)>> getOnChangeText() noexcept override {
      auto __result = _swiftPart.getOnChangeText();
      return __result;
    }
    inline void setOnChangeText(const std::optional<std::function<void(const std::string& /* text */)>>& onChangeText) noexcept override {
      _swiftPart.setOnChangeText(onChangeText);
    }
    inline std::optional<bool> getMultiline() noexcept override {
      auto __result = _swiftPart.getMultiline();
      return __result;
    }
    inline void setMultiline(std::optional<bool> multiline) noexcept override {
      _swiftPart.setMultiline(multiline);
    }
    inline std::optional<double> getNumberOfLines() noexcept override {
      auto __result = _swiftPart.getNumberOfLines();
      return __result;
    }
    inline void setNumberOfLines(std::optional<double> numberOfLines) noexcept override {
      _swiftPart.setNumberOfLines(numberOfLines);
    }
    inline std::optional<TextInputKeyboardTypeOptions> getKeyboardType() noexcept override {
      auto __result = _swiftPart.getKeyboardType();
      return __result;
    }
    inline void setKeyboardType(std::optional<TextInputKeyboardTypeOptions> keyboardType) noexcept override {
      _swiftPart.setKeyboardType(keyboardType);
    }
    inline std::optional<bool> getAutocorrection() noexcept override {
      auto __result = _swiftPart.getAutocorrection();
      return __result;
    }
    inline void setAutocorrection(std::optional<bool> autocorrection) noexcept override {
      _swiftPart.setAutocorrection(autocorrection);
    }
    inline std::optional<TextInputVariant> getVariant() noexcept override {
      auto __result = _swiftPart.getVariant();
      return __result;
    }
    inline void setVariant(std::optional<TextInputVariant> variant) noexcept override {
      _swiftPart.setVariant(variant);
    }
    inline std::optional<std::string> getPlaceholder() noexcept override {
      auto __result = _swiftPart.getPlaceholder();
      return __result;
    }
    inline void setPlaceholder(const std::optional<std::string>& placeholder) noexcept override {
      _swiftPart.setPlaceholder(placeholder);
    }
    inline std::optional<std::string> getLabel() noexcept override {
      auto __result = _swiftPart.getLabel();
      return __result;
    }
    inline void setLabel(const std::optional<std::string>& label) noexcept override {
      _swiftPart.setLabel(label);
    }

  public:
    // Methods
    

  private:
    NativeUi::HybridTextInputSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nativeui
