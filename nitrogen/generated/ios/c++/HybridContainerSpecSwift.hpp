///
/// HybridContainerSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridContainerSpec.hpp"

// Forward declaration of `HybridContainerSpec_cxx` to properly resolve imports.
namespace NativeUi { class HybridContainerSpec_cxx; }





#include "NativeUi-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nativeui {

  /**
   * The C++ part of HybridContainerSpec_cxx.swift.
   *
   * HybridContainerSpecSwift (C++) accesses HybridContainerSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridContainerSpec_cxx can directly inherit from the C++ class HybridContainerSpec
   * to simplify the whole structure and memory management.
   */
  class HybridContainerSpecSwift: public virtual HybridContainerSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridContainerSpecSwift(const NativeUi::HybridContainerSpec_cxx& swiftPart):
      HybridObject(HybridContainerSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NativeUi::HybridContainerSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    

  private:
    NativeUi::HybridContainerSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nativeui
