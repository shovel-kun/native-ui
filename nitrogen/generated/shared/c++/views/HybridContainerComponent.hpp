///
/// HybridContainerComponent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <optional>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/NitroHash.hpp>
#include <NitroModules/CachedProp.hpp>
#include <react/renderer/core/ConcreteComponentDescriptor.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/components/view/ConcreteViewShadowNode.h>
#include <react/renderer/components/view/ViewProps.h>

#include <optional>
#include <functional>
#include <memory>
#include "HybridContainerSpec.hpp"

namespace margelo::nitro::nativeui::views {

  using namespace facebook;

  /**
   * The name of the actual native View.
   */
  extern const char HybridContainerComponentName[];

  /**
   * Props for the "Container" View.
   */
  class HybridContainerProps final: public react::ViewProps {
  public:
    HybridContainerProps() = default;
    HybridContainerProps(const HybridContainerProps&);
    HybridContainerProps(const react::PropsParserContext& context,
                         const HybridContainerProps& sourceProps,
                         const react::RawProps& rawProps);

  public:
    CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::nativeui::HybridContainerSpec>& /* ref */)>>> hybridRef;

  private:
    static bool filterObjectKeys(const std::string& propName);
  };

  /**
   * State for the "Container" View.
   */
  class HybridContainerState final {
  public:
    HybridContainerState() = default;

    HybridContainerState(float width, float height) {
        if (width >= 0) {
            _width = width;
        } else {
            _width = std::numeric_limits<float>::quiet_NaN();
        }
        if (height >= 0) {
            _height = height;
        } else {
            _height = std::numeric_limits<float>::quiet_NaN();
        }
    };

  public:
    void setProps(const HybridContainerProps& props) { _props.emplace(props); }
    const std::optional<HybridContainerProps>& getProps() const { return _props; }

  public:
#ifdef ANDROID
  HybridContainerState(const HybridContainerState& /* previousState */, folly::dynamic data)
      : _width((float)data["width"].getDouble()),
        _height((float)data["height"].getDouble()){};
  folly::dynamic getDynamic() const {
    throw std::runtime_error("HybridContainerState does not support folly!");
  }
  react::MapBuffer getMapBuffer() const {
    throw std::runtime_error("HybridContainerState does not support MapBuffer!");
  };
#endif

  float _width = std::numeric_limits<float>::quiet_NaN();
  float _height = std::numeric_limits<float>::quiet_NaN();

  private:
    std::optional<HybridContainerProps> _props;
  };

  /**
   * The Shadow Node for the "Container" View.
   */
  using HybridContainerShadowNode = react::ConcreteViewShadowNode<HybridContainerComponentName /* "HybridContainer" */,
                                                                  HybridContainerProps /* custom props */,
                                                                  react::ViewEventEmitter /* default */,
                                                                  HybridContainerState /* custom state */>;

  /**
   * The Component Descriptor for the "Container" View.
   */
  class HybridContainerComponentDescriptor final: public react::ConcreteComponentDescriptor<HybridContainerShadowNode> {
  public:
    HybridContainerComponentDescriptor(const react::ComponentDescriptorParameters& parameters);

  public:
    /**
     * A faster path for cloning props - reuses the caching logic from `HybridContainerProps`.
     */
    react::Props::Shared cloneProps(const react::PropsParserContext& context,
                                    const react::Props::Shared& props,
                                    react::RawProps rawProps) const override;
#ifdef ANDROID
    void adopt(react::ShadowNode& shadowNode) const override;
#endif
  };

  /* The actual view for "Container" needs to be implemented in platform-specific code. */

} // namespace margelo::nitro::nativeui::views
