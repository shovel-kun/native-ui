///
/// HybridTriStateCheckboxComponent.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <optional>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/NitroHash.hpp>
#include <NitroModules/CachedProp.hpp>
#include <react/renderer/core/ConcreteComponentDescriptor.h>
#include <react/renderer/core/PropsParserContext.h>
#include <react/renderer/components/view/ConcreteViewShadowNode.h>
#include <react/renderer/components/view/ViewProps.h>

#include "TriStateCheckboxState.hpp"
#include <optional>
#include <optional>
#include <functional>
#include <optional>
#include <functional>
#include <memory>
#include "HybridTriStateCheckboxSpec.hpp"

namespace margelo::nitro::nativeui::views {

  using namespace facebook;

  /**
   * The name of the actual native View.
   */
  extern const char HybridTriStateCheckboxComponentName[];

  /**
   * Props for the "TriStateCheckbox" View.
   */
  class HybridTriStateCheckboxProps final: public react::ViewProps {
  public:
    HybridTriStateCheckboxProps() = default;
    HybridTriStateCheckboxProps(const HybridTriStateCheckboxProps&);
    HybridTriStateCheckboxProps(const react::PropsParserContext& context,
                                const HybridTriStateCheckboxProps& sourceProps,
                                const react::RawProps& rawProps);

  public:
    CachedProp<TriStateCheckboxState> state;
    CachedProp<std::optional<bool>> disabled;
    CachedProp<std::optional<std::function<void()>>> onPress;
    CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::nativeui::HybridTriStateCheckboxSpec>& /* ref */)>>> hybridRef;

  private:
    static bool filterObjectKeys(const std::string& propName);
  };

  /**
   * State for the "TriStateCheckbox" View.
   */
  class HybridTriStateCheckboxState final {
  public:
    HybridTriStateCheckboxState() = default;

    HybridTriStateCheckboxState(float width, float height) {
        if (width >= 0) {
            _width = width;
        } else {
            _width = std::numeric_limits<float>::quiet_NaN();
        }
        if (height >= 0) {
            _height = height;
        } else {
            _height = std::numeric_limits<float>::quiet_NaN();
        }
    };

  public:
    void setProps(const HybridTriStateCheckboxProps& props) { _props.emplace(props); }
    const std::optional<HybridTriStateCheckboxProps>& getProps() const { return _props; }

  public:
#ifdef ANDROID
  HybridTriStateCheckboxState(const HybridTriStateCheckboxState& /* previousState */, folly::dynamic data)
      : _width((float)data["width"].getDouble()),
        _height((float)data["height"].getDouble()){};
  folly::dynamic getDynamic() const {
    throw std::runtime_error("HybridTriStateCheckboxState does not support folly!");
  }
  react::MapBuffer getMapBuffer() const {
    throw std::runtime_error("HybridTriStateCheckboxState does not support MapBuffer!");
  };
#endif

  float _width = std::numeric_limits<float>::quiet_NaN();
  float _height = std::numeric_limits<float>::quiet_NaN();

  private:
    std::optional<HybridTriStateCheckboxProps> _props;
  };

  /**
   * The Shadow Node for the "TriStateCheckbox" View.
   */
  using HybridTriStateCheckboxShadowNode = react::ConcreteViewShadowNode<HybridTriStateCheckboxComponentName /* "HybridTriStateCheckbox" */,
                                                                         HybridTriStateCheckboxProps /* custom props */,
                                                                         react::ViewEventEmitter /* default */,
                                                                         HybridTriStateCheckboxState /* custom state */>;

  /**
   * The Component Descriptor for the "TriStateCheckbox" View.
   */
  class HybridTriStateCheckboxComponentDescriptor final: public react::ConcreteComponentDescriptor<HybridTriStateCheckboxShadowNode> {
  public:
    HybridTriStateCheckboxComponentDescriptor(const react::ComponentDescriptorParameters& parameters);

  public:
    /**
     * A faster path for cloning props - reuses the caching logic from `HybridTriStateCheckboxProps`.
     */
    react::Props::Shared cloneProps(const react::PropsParserContext& context,
                                    const react::Props::Shared& props,
                                    react::RawProps rawProps) const override;
#ifdef ANDROID
    void adopt(react::ShadowNode& shadowNode) const override;
#endif
  };

  /* The actual view for "TriStateCheckbox" needs to be implemented in platform-specific code. */

} // namespace margelo::nitro::nativeui::views
