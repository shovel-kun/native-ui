///
/// HybridTriStateCheckboxComponent.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridTriStateCheckboxComponent.hpp"

#include <string>
#include <exception>
#include <utility>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/JSIConverter.hpp>
#include <react/renderer/core/RawValue.h>
#include <react/renderer/core/ShadowNode.h>
#include <react/renderer/core/ComponentDescriptor.h>
#include <react/renderer/components/view/ViewProps.h>

namespace margelo::nitro::nativeui::views {

  extern const char HybridTriStateCheckboxComponentName[] = "TriStateCheckbox";

  HybridTriStateCheckboxProps::HybridTriStateCheckboxProps(const react::PropsParserContext& context,
                                                           const HybridTriStateCheckboxProps& sourceProps,
                                                           const react::RawProps& rawProps):
    react::ViewProps(context, sourceProps, rawProps, filterObjectKeys),
    state([&]() -> CachedProp<TriStateCheckboxState> {
      try {
        const react::RawValue* rawValue = rawProps.at("state", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.state;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<TriStateCheckboxState>::fromRawValue(*runtime, value, sourceProps.state);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("TriStateCheckbox.state: ") + exc.what());
      }
    }()),
    disabled([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("disabled", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.disabled;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.disabled);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("TriStateCheckbox.disabled: ") + exc.what());
      }
    }()),
    onPress([&]() -> CachedProp<std::optional<std::function<void()>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("onPress", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.onPress;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void()>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.onPress);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("TriStateCheckbox.onPress: ") + exc.what());
      }
    }()),
    hybridRef([&]() -> CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::nativeui::HybridTriStateCheckboxSpec>& /* ref */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("hybridRef", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.hybridRef;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::nativeui::HybridTriStateCheckboxSpec>& /* ref */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.hybridRef);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("TriStateCheckbox.hybridRef: ") + exc.what());
      }
    }()) { }

  HybridTriStateCheckboxProps::HybridTriStateCheckboxProps(const HybridTriStateCheckboxProps& other):
    react::ViewProps(),
    state(other.state),
    disabled(other.disabled),
    onPress(other.onPress),
    hybridRef(other.hybridRef) { }

  bool HybridTriStateCheckboxProps::filterObjectKeys(const std::string& propName) {
    switch (hashString(propName)) {
      case hashString("state"): return true;
      case hashString("disabled"): return true;
      case hashString("onPress"): return true;
      case hashString("hybridRef"): return true;
      default: return false;
    }
  }

  HybridTriStateCheckboxComponentDescriptor::HybridTriStateCheckboxComponentDescriptor(const react::ComponentDescriptorParameters& parameters)
    : ConcreteComponentDescriptor(parameters,
                                  react::RawPropsParser(/* enableJsiParser */ true)) {}

  react::Props::Shared HybridTriStateCheckboxComponentDescriptor::cloneProps(const react::PropsParserContext& context,
                                                                             const react::Props::Shared& props,
                                                                             react::RawProps rawProps) const {
    // 1. Prepare raw props parser
    rawProps.parse(rawPropsParser_);
    // 2. Copy props with Nitro's cached copy constructor
    return HybridTriStateCheckboxShadowNode::Props(context, /* & */ rawProps, props);
  }

#ifdef ANDROID
  void HybridTriStateCheckboxComponentDescriptor::adopt(react::ShadowNode& shadowNode) const {
    // This is called immediately after `ShadowNode` is created, cloned or in progress.
    // On Android, we need to wrap props in our state, which gets routed through Java and later unwrapped in JNI/C++.
    auto& concreteShadowNode = dynamic_cast<HybridTriStateCheckboxShadowNode&>(shadowNode);
    const HybridTriStateCheckboxProps& props = concreteShadowNode.getConcreteProps();
    HybridTriStateCheckboxState state = concreteShadowNode.getStateData();

    auto width = state._width;
    auto height = state._height;

    if (!isnan(width) or !isnan(height)) {
        auto const &props = *std::static_pointer_cast<const facebook::react::ViewProps>(concreteShadowNode.getProps());

        // The node has width and/or height set as style props, so we should not override it
        auto widthProp = props.yogaStyle.dimension(facebook::yoga::Dimension::Width);
        auto heightProp = props.yogaStyle.dimension(facebook::yoga::Dimension::Height);

        if (widthProp.value().isDefined()) {
            // view has fixed dimension size set in props, so we should not autosize it in that axis
            width = widthProp.value().unwrap();
        }
        if (heightProp.value().isDefined()) {
            height = heightProp.value().unwrap();
        }

        concreteShadowNode.setSize({width, height});
    }
    state.setProps(props);
    concreteShadowNode.setStateData(std::move(state));
  }
#endif

} // namespace margelo::nitro::nativeui::views
