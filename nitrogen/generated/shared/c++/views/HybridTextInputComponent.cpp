///
/// HybridTextInputComponent.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridTextInputComponent.hpp"

#include <string>
#include <exception>
#include <utility>
#include <NitroModules/NitroDefines.hpp>
#include <NitroModules/JSIConverter.hpp>
#include <react/renderer/core/RawValue.h>
#include <react/renderer/core/ShadowNode.h>
#include <react/renderer/core/ComponentDescriptor.h>
#include <react/renderer/components/view/ViewProps.h>

namespace margelo::nitro::nativeui::views {

  extern const char HybridTextInputComponentName[] = "TextInput";

  HybridTextInputProps::HybridTextInputProps(const react::PropsParserContext& context,
                                             const HybridTextInputProps& sourceProps,
                                             const react::RawProps& rawProps):
    react::ViewProps(context, sourceProps, rawProps, filterObjectKeys),
    defaultValue([&]() -> CachedProp<std::optional<std::string>> {
      try {
        const react::RawValue* rawValue = rawProps.at("defaultValue", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.defaultValue;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::string>>::fromRawValue(*runtime, value, sourceProps.defaultValue);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("TextInput.defaultValue: ") + exc.what());
      }
    }()),
    onChangeText([&]() -> CachedProp<std::optional<std::function<void(const std::string& /* text */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("onChangeText", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.onChangeText;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(const std::string& /* text */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.onChangeText);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("TextInput.onChangeText: ") + exc.what());
      }
    }()),
    multiline([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("multiline", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.multiline;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.multiline);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("TextInput.multiline: ") + exc.what());
      }
    }()),
    numberOfLines([&]() -> CachedProp<std::optional<double>> {
      try {
        const react::RawValue* rawValue = rawProps.at("numberOfLines", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.numberOfLines;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<double>>::fromRawValue(*runtime, value, sourceProps.numberOfLines);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("TextInput.numberOfLines: ") + exc.what());
      }
    }()),
    keyboardType([&]() -> CachedProp<std::optional<TextInputKeyboardTypeOptions>> {
      try {
        const react::RawValue* rawValue = rawProps.at("keyboardType", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.keyboardType;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<TextInputKeyboardTypeOptions>>::fromRawValue(*runtime, value, sourceProps.keyboardType);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("TextInput.keyboardType: ") + exc.what());
      }
    }()),
    autocorrection([&]() -> CachedProp<std::optional<bool>> {
      try {
        const react::RawValue* rawValue = rawProps.at("autocorrection", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.autocorrection;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<bool>>::fromRawValue(*runtime, value, sourceProps.autocorrection);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("TextInput.autocorrection: ") + exc.what());
      }
    }()),
    variant([&]() -> CachedProp<std::optional<TextInputVariant>> {
      try {
        const react::RawValue* rawValue = rawProps.at("variant", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.variant;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<TextInputVariant>>::fromRawValue(*runtime, value, sourceProps.variant);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("TextInput.variant: ") + exc.what());
      }
    }()),
    placeholder([&]() -> CachedProp<std::optional<std::string>> {
      try {
        const react::RawValue* rawValue = rawProps.at("placeholder", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.placeholder;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::string>>::fromRawValue(*runtime, value, sourceProps.placeholder);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("TextInput.placeholder: ") + exc.what());
      }
    }()),
    label([&]() -> CachedProp<std::optional<std::string>> {
      try {
        const react::RawValue* rawValue = rawProps.at("label", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.label;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::string>>::fromRawValue(*runtime, value, sourceProps.label);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("TextInput.label: ") + exc.what());
      }
    }()),
    hybridRef([&]() -> CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::nativeui::HybridTextInputSpec>& /* ref */)>>> {
      try {
        const react::RawValue* rawValue = rawProps.at("hybridRef", nullptr, nullptr);
        if (rawValue == nullptr) return sourceProps.hybridRef;
        const auto& [runtime, value] = (std::pair<jsi::Runtime*, jsi::Value>)*rawValue;
        return CachedProp<std::optional<std::function<void(const std::shared_ptr<margelo::nitro::nativeui::HybridTextInputSpec>& /* ref */)>>>::fromRawValue(*runtime, value.asObject(*runtime).getProperty(*runtime, "f"), sourceProps.hybridRef);
      } catch (const std::exception& exc) {
        throw std::runtime_error(std::string("TextInput.hybridRef: ") + exc.what());
      }
    }()) { }

  HybridTextInputProps::HybridTextInputProps(const HybridTextInputProps& other):
    react::ViewProps(),
    defaultValue(other.defaultValue),
    onChangeText(other.onChangeText),
    multiline(other.multiline),
    numberOfLines(other.numberOfLines),
    keyboardType(other.keyboardType),
    autocorrection(other.autocorrection),
    variant(other.variant),
    placeholder(other.placeholder),
    label(other.label),
    hybridRef(other.hybridRef) { }

  bool HybridTextInputProps::filterObjectKeys(const std::string& propName) {
    switch (hashString(propName)) {
      case hashString("defaultValue"): return true;
      case hashString("onChangeText"): return true;
      case hashString("multiline"): return true;
      case hashString("numberOfLines"): return true;
      case hashString("keyboardType"): return true;
      case hashString("autocorrection"): return true;
      case hashString("variant"): return true;
      case hashString("placeholder"): return true;
      case hashString("label"): return true;
      case hashString("hybridRef"): return true;
      default: return false;
    }
  }

  HybridTextInputComponentDescriptor::HybridTextInputComponentDescriptor(const react::ComponentDescriptorParameters& parameters)
    : ConcreteComponentDescriptor(parameters,
                                  react::RawPropsParser(/* enableJsiParser */ true)) {}

  react::Props::Shared HybridTextInputComponentDescriptor::cloneProps(const react::PropsParserContext& context,
                                                                      const react::Props::Shared& props,
                                                                      react::RawProps rawProps) const {
    // 1. Prepare raw props parser
    rawProps.parse(rawPropsParser_);
    // 2. Copy props with Nitro's cached copy constructor
    return HybridTextInputShadowNode::Props(context, /* & */ rawProps, props);
  }

#ifdef ANDROID
  void HybridTextInputComponentDescriptor::adopt(react::ShadowNode& shadowNode) const {
    // This is called immediately after `ShadowNode` is created, cloned or in progress.
    // On Android, we need to wrap props in our state, which gets routed through Java and later unwrapped in JNI/C++.
    auto& concreteShadowNode = dynamic_cast<HybridTextInputShadowNode&>(shadowNode);
    const HybridTextInputProps& props = concreteShadowNode.getConcreteProps();
    HybridTextInputState state = concreteShadowNode.getStateData();

    auto width = state._width;
    auto height = state._height;

    if (!isnan(width) or !isnan(height)) {
        auto const &props = *std::static_pointer_cast<const facebook::react::ViewProps>(concreteShadowNode.getProps());

        // The node has width and/or height set as style props, so we should not override it
        auto widthProp = props.yogaStyle.dimension(facebook::yoga::Dimension::Width);
        auto heightProp = props.yogaStyle.dimension(facebook::yoga::Dimension::Height);

        if (widthProp.value().isDefined()) {
            // view has fixed dimension size set in props, so we should not autosize it in that axis
            width = widthProp.value().unwrap();
        }
        if (heightProp.value().isDefined()) {
            height = heightProp.value().unwrap();
        }

        concreteShadowNode.setSize({width, height});
    }
    state.setProps(props);
    concreteShadowNode.setStateData(std::move(state));
  }
#endif

} // namespace margelo::nitro::nativeui::views
