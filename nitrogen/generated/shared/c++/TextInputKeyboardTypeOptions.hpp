///
/// TextInputKeyboardTypeOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nativeui {

  /**
   * An enum which can be represented as a JavaScript union (TextInputKeyboardTypeOptions).
   */
  enum class TextInputKeyboardTypeOptions {
    DEFAULT      SWIFT_NAME(default) = 0,
    NUMBER_PAD      SWIFT_NAME(numberPad) = 1,
    DECIMAL_PAD      SWIFT_NAME(decimalPad) = 2,
    NUMERIC      SWIFT_NAME(numeric) = 3,
    EMAIL_ADDRESS      SWIFT_NAME(emailAddress) = 4,
    PHONE_PAD      SWIFT_NAME(phonePad) = 5,
    URL      SWIFT_NAME(url) = 6,
    ASCII_CAPABLE      SWIFT_NAME(asciiCapable) = 7,
    NUMBERS_AND_PUNCTUATION      SWIFT_NAME(numbersAndPunctuation) = 8,
    NAME_PHONE_PAD      SWIFT_NAME(namePhonePad) = 9,
    TWITTER      SWIFT_NAME(twitter) = 10,
    WEB_SEARCH      SWIFT_NAME(webSearch) = 11,
    PASSWORD      SWIFT_NAME(password) = 12,
    NUMBER_PASSWORD      SWIFT_NAME(numberPassword) = 13,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nativeui

namespace margelo::nitro {

  using namespace margelo::nitro::nativeui;

  // C++ TextInputKeyboardTypeOptions <> JS TextInputKeyboardTypeOptions (union)
  template <>
  struct JSIConverter<TextInputKeyboardTypeOptions> final {
    static inline TextInputKeyboardTypeOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("default"): return TextInputKeyboardTypeOptions::DEFAULT;
        case hashString("number-pad"): return TextInputKeyboardTypeOptions::NUMBER_PAD;
        case hashString("decimal-pad"): return TextInputKeyboardTypeOptions::DECIMAL_PAD;
        case hashString("numeric"): return TextInputKeyboardTypeOptions::NUMERIC;
        case hashString("email-address"): return TextInputKeyboardTypeOptions::EMAIL_ADDRESS;
        case hashString("phone-pad"): return TextInputKeyboardTypeOptions::PHONE_PAD;
        case hashString("url"): return TextInputKeyboardTypeOptions::URL;
        case hashString("ascii-capable"): return TextInputKeyboardTypeOptions::ASCII_CAPABLE;
        case hashString("numbers-and-punctuation"): return TextInputKeyboardTypeOptions::NUMBERS_AND_PUNCTUATION;
        case hashString("name-phone-pad"): return TextInputKeyboardTypeOptions::NAME_PHONE_PAD;
        case hashString("twitter"): return TextInputKeyboardTypeOptions::TWITTER;
        case hashString("web-search"): return TextInputKeyboardTypeOptions::WEB_SEARCH;
        case hashString("password"): return TextInputKeyboardTypeOptions::PASSWORD;
        case hashString("number-password"): return TextInputKeyboardTypeOptions::NUMBER_PASSWORD;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum TextInputKeyboardTypeOptions - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, TextInputKeyboardTypeOptions arg) {
      switch (arg) {
        case TextInputKeyboardTypeOptions::DEFAULT: return JSIConverter<std::string>::toJSI(runtime, "default");
        case TextInputKeyboardTypeOptions::NUMBER_PAD: return JSIConverter<std::string>::toJSI(runtime, "number-pad");
        case TextInputKeyboardTypeOptions::DECIMAL_PAD: return JSIConverter<std::string>::toJSI(runtime, "decimal-pad");
        case TextInputKeyboardTypeOptions::NUMERIC: return JSIConverter<std::string>::toJSI(runtime, "numeric");
        case TextInputKeyboardTypeOptions::EMAIL_ADDRESS: return JSIConverter<std::string>::toJSI(runtime, "email-address");
        case TextInputKeyboardTypeOptions::PHONE_PAD: return JSIConverter<std::string>::toJSI(runtime, "phone-pad");
        case TextInputKeyboardTypeOptions::URL: return JSIConverter<std::string>::toJSI(runtime, "url");
        case TextInputKeyboardTypeOptions::ASCII_CAPABLE: return JSIConverter<std::string>::toJSI(runtime, "ascii-capable");
        case TextInputKeyboardTypeOptions::NUMBERS_AND_PUNCTUATION: return JSIConverter<std::string>::toJSI(runtime, "numbers-and-punctuation");
        case TextInputKeyboardTypeOptions::NAME_PHONE_PAD: return JSIConverter<std::string>::toJSI(runtime, "name-phone-pad");
        case TextInputKeyboardTypeOptions::TWITTER: return JSIConverter<std::string>::toJSI(runtime, "twitter");
        case TextInputKeyboardTypeOptions::WEB_SEARCH: return JSIConverter<std::string>::toJSI(runtime, "web-search");
        case TextInputKeyboardTypeOptions::PASSWORD: return JSIConverter<std::string>::toJSI(runtime, "password");
        case TextInputKeyboardTypeOptions::NUMBER_PASSWORD: return JSIConverter<std::string>::toJSI(runtime, "number-password");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert TextInputKeyboardTypeOptions to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("default"):
        case hashString("number-pad"):
        case hashString("decimal-pad"):
        case hashString("numeric"):
        case hashString("email-address"):
        case hashString("phone-pad"):
        case hashString("url"):
        case hashString("ascii-capable"):
        case hashString("numbers-and-punctuation"):
        case hashString("name-phone-pad"):
        case hashString("twitter"):
        case hashString("web-search"):
        case hashString("password"):
        case hashString("number-password"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
